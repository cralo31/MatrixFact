// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// NMF
List NMF(arma::mat X, const int k, arma::mat F_init, arma::mat G_init, const double error, const int iter);
RcppExport SEXP _MatrixFact_NMF(SEXP XSEXP, SEXP kSEXP, SEXP F_initSEXP, SEXP G_initSEXP, SEXP errorSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< const int >::type k(kSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type F_init(F_initSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type G_init(G_initSEXP);
    Rcpp::traits::input_parameter< const double >::type error(errorSEXP);
    Rcpp::traits::input_parameter< const int >::type iter(iterSEXP);
    rcpp_result_gen = Rcpp::wrap(NMF(X, k, F_init, G_init, error, iter));
    return rcpp_result_gen;
END_RCPP
}
// lognmf
List lognmf(arma::mat X, const int k, arma::mat F_init, arma::mat G_init, const double error, const int iter, double tau, double step);
RcppExport SEXP _MatrixFact_lognmf(SEXP XSEXP, SEXP kSEXP, SEXP F_initSEXP, SEXP G_initSEXP, SEXP errorSEXP, SEXP iterSEXP, SEXP tauSEXP, SEXP stepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< const int >::type k(kSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type F_init(F_initSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type G_init(G_initSEXP);
    Rcpp::traits::input_parameter< const double >::type error(errorSEXP);
    Rcpp::traits::input_parameter< const int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double >::type step(stepSEXP);
    rcpp_result_gen = Rcpp::wrap(lognmf(X, k, F_init, G_init, error, iter, tau, step));
    return rcpp_result_gen;
END_RCPP
}
// NMF_LOG
List NMF_LOG(arma::mat X, const int k, arma::mat F_init, arma::mat G_init, const double error, const int iter, double step);
RcppExport SEXP _MatrixFact_NMF_LOG(SEXP XSEXP, SEXP kSEXP, SEXP F_initSEXP, SEXP G_initSEXP, SEXP errorSEXP, SEXP iterSEXP, SEXP stepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< const int >::type k(kSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type F_init(F_initSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type G_init(G_initSEXP);
    Rcpp::traits::input_parameter< const double >::type error(errorSEXP);
    Rcpp::traits::input_parameter< const int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< double >::type step(stepSEXP);
    rcpp_result_gen = Rcpp::wrap(NMF_LOG(X, k, F_init, G_init, error, iter, step));
    return rcpp_result_gen;
END_RCPP
}
// ONMF
List ONMF(arma::mat X, const int k, arma::mat F_init, arma::mat G_init, const double error, const int iter);
RcppExport SEXP _MatrixFact_ONMF(SEXP XSEXP, SEXP kSEXP, SEXP F_initSEXP, SEXP G_initSEXP, SEXP errorSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< const int >::type k(kSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type F_init(F_initSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type G_init(G_initSEXP);
    Rcpp::traits::input_parameter< const double >::type error(errorSEXP);
    Rcpp::traits::input_parameter< const int >::type iter(iterSEXP);
    rcpp_result_gen = Rcpp::wrap(ONMF(X, k, F_init, G_init, error, iter));
    return rcpp_result_gen;
END_RCPP
}
// SemiNMF
List SemiNMF(arma::mat X, const int k, arma::mat F_init, arma::mat G_init, const double error, const int iter);
RcppExport SEXP _MatrixFact_SemiNMF(SEXP XSEXP, SEXP kSEXP, SEXP F_initSEXP, SEXP G_initSEXP, SEXP errorSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< const int >::type k(kSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type F_init(F_initSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type G_init(G_initSEXP);
    Rcpp::traits::input_parameter< const double >::type error(errorSEXP);
    Rcpp::traits::input_parameter< const int >::type iter(iterSEXP);
    rcpp_result_gen = Rcpp::wrap(SemiNMF(X, k, F_init, G_init, error, iter));
    return rcpp_result_gen;
END_RCPP
}
// SO_BIN3
List SO_BIN3(arma::mat X, const int k, arma::mat F_init, arma::mat G_init, const double error, const int iter, double tau, const int factor, double step);
RcppExport SEXP _MatrixFact_SO_BIN3(SEXP XSEXP, SEXP kSEXP, SEXP F_initSEXP, SEXP G_initSEXP, SEXP errorSEXP, SEXP iterSEXP, SEXP tauSEXP, SEXP factorSEXP, SEXP stepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< const int >::type k(kSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type F_init(F_initSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type G_init(G_initSEXP);
    Rcpp::traits::input_parameter< const double >::type error(errorSEXP);
    Rcpp::traits::input_parameter< const int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const int >::type factor(factorSEXP);
    Rcpp::traits::input_parameter< double >::type step(stepSEXP);
    rcpp_result_gen = Rcpp::wrap(SO_BIN3(X, k, F_init, G_init, error, iter, tau, factor, step));
    return rcpp_result_gen;
END_RCPP
}
// SO_NMF
List SO_NMF(arma::mat X, const int k, arma::mat F_init, arma::mat G_init, const double error, const int iter, double tau, const int factor);
RcppExport SEXP _MatrixFact_SO_NMF(SEXP XSEXP, SEXP kSEXP, SEXP F_initSEXP, SEXP G_initSEXP, SEXP errorSEXP, SEXP iterSEXP, SEXP tauSEXP, SEXP factorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< const int >::type k(kSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type F_init(F_initSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type G_init(G_initSEXP);
    Rcpp::traits::input_parameter< const double >::type error(errorSEXP);
    Rcpp::traits::input_parameter< const int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const int >::type factor(factorSEXP);
    rcpp_result_gen = Rcpp::wrap(SO_NMF(X, k, F_init, G_init, error, iter, tau, factor));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_MatrixFact_NMF", (DL_FUNC) &_MatrixFact_NMF, 6},
    {"_MatrixFact_lognmf", (DL_FUNC) &_MatrixFact_lognmf, 8},
    {"_MatrixFact_NMF_LOG", (DL_FUNC) &_MatrixFact_NMF_LOG, 7},
    {"_MatrixFact_ONMF", (DL_FUNC) &_MatrixFact_ONMF, 6},
    {"_MatrixFact_SemiNMF", (DL_FUNC) &_MatrixFact_SemiNMF, 6},
    {"_MatrixFact_SO_BIN3", (DL_FUNC) &_MatrixFact_SO_BIN3, 9},
    {"_MatrixFact_SO_NMF", (DL_FUNC) &_MatrixFact_SO_NMF, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_MatrixFact(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
